---
name: pypi_deploy

'on':
  workflow_call:
    inputs:
      additional_packages:
        default: ''
        description: String of additional packages that should be installed.
        required: false
        type: string
      jobs_run_on:
        default: ubuntu-latest
        description: The runner group on which jobs will run.
        required: false
        type: string
      poetry_install_options:
        default: '--no-root'
        description: Extra options to pass to Poetry when doing an install.
        required: false
        type: string
      python_version:
        default: '3.12'
        description: The version of Python to use for the run.
        required: false
        type: string
      timeout_minutes:
        default: 5
        description: The maximum time (in minutes) for a job to run.
        required: false
        type: number
      working_directory:
        default: '.'
        description: The working directory where all jobs should be executed.
        required: false
        type: string
    secrets:
      pypi_token:
        description: The PyPi token to use to deploy.
        required: true

jobs:
  pypi_deploy:
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    runs-on: ${{ inputs.jobs_run_on }}
    steps:
      - name: Install additional packages
        if: ${{ inputs.additional_packages != '' }}
        run: |
          sudo apt-get update -yq
          sudo apt-get install -y ${{ inputs.additional_packages }}
      - name: Checkout repo
        uses: actions/checkout@v5
      - name: Install poetry
        run: pipx install poetry
      - name: "Set up Python ${{ inputs.python_version }}"
        uses: actions/setup-python@v5
        with:
          cache: poetry
          python-version: "${{ inputs.python_version }}"
      - name: Configure Poetry
        run: poetry config virtualenvs.in-project true
      - name: Install dependencies
        run: poetry install ${{ inputs.poetry_install_options }}
      - name: Setup PyPi credential
        env:
          PYPI_TOKEN: ${{ secrets.pypi_token }}
        run: poetry config pypi-token.pypi "$PYPI_TOKEN"
      - name: Package build
        run: poetry build
      - name: Publish package to PyPi
        run: poetry publish
    timeout-minutes: ${{ inputs.timeout_minutes }}
